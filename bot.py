import sys
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from interpret import Interpret


class Bot():

    # Constructor
    def __init__(self):
        # Declara una constant amb el access token que llegeix de token.txt
        TOKEN = open('token.txt').read().strip()

        # Carpeta on es guardaran les imatges generades (carpeta local)
        self.imageFolder = 'Imatges/'

        # Inst√†ncia de l'int√®rpret
        # self.interpret = Interpret()

        # Crea els objectes per treballar amb Telegram
        self.updater = Updater(token=TOKEN, use_context=True)
        dispatcher = self.updater.dispatcher

        # Relaciona les comandes amb els m√®todes
        dispatcher.add_handler(CommandHandler('start', self.start))
        dispatcher.add_handler(CommandHandler('help', self.help))
        dispatcher.add_handler(CommandHandler('author', self.author))
        dispatcher.add_handler(CommandHandler('reset', self.reset))
        dispatcher.add_handler(CommandHandler('exit', self.exit))   # No acaba de funcionar del tot b√©

        # Enlla√ßa un missatge normal de text amb la funci√≥ interpret
        dispatcher.add_handler(MessageHandler(filters=Filters.text, callback=self.interpret))

        # Encen el bot
        self.updater.start_polling()

    # Metode que est√† associat a la comanda /start. S'inicia el bot  i mostrem
    # totes les possibles comandes que podem demanra-li
    def start(self, update, context):
        # Cada usuari tindr√† un interpret diferent pel que no se sobreescriur√†n les dades dels uns als altres
        context.user_data['antlr'] = Interpret()

        nom = update.message.from_user.first_name
        nomBot = 'polyBot'
        text = '''
Hola {}. Em dic `{}` ü§ñ, s√≥c un Bot que t\'ajuda a crear Poligons, operar amb ells i representar-los visualment.
Pots escriure les seg√ºents *comandes* per a obtenir *m√©s informaci√≥*:
*/start* - Inicia la conversa amb el Bot.
*/help* - Explicaci√≥ de les comandes que pots fer servir i com utilitzar-les.
*/author* - Autor del projecte.
*/reset* - Reinicia el context d'execuci√≥ i elimina les dades de l'execuci√≥ pr√®via.
        '''.format(nom, nomBot)

        context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='Markdown', text=text)

    # Metode que est√† associat a la comanda /help.
    # Es dona tota l'informaci√≥ de com crear els poligons i les operacions que podem fer amb ells
    def help(self, update, context):
        rgb = "{r g b}"
        text = '''
Per tal de que et pugui entendre, haur√†s de demanar\'m-ho utilitzant les comandes que tens a continuaci√≥:

Per crear un pol√≠gon haur√†s d'introduir tots els seus v√®rtex de la seg√ºent manera:

    [x1 y1  x2 y2  x3 y3]

On cada parell de n√∫meros x y correspon a les coordenades d\'un punt.
Alternativament pots utilitzar "\'!\'num" on num √©s el n√∫mero de v√®rtex. Aix√≤ generar√† un pol√≠gon amb "num" v√®rtex amb coordenades aleat√≤ries entre [0,1].

‚ö†Ô∏èIMPORTANT‚ö†Ô∏è: En cas de que el pol√≠gon introduit no sigui convex el convertir√© autom√†ticament en un pol√≠gon convex, ja que aquests s√≥n amb els que s√© treballar.
Si vols assegurar el correcte funcionament de les operacions assegura\'t que introdueixes pol√≠gons regulars (amb els v√®rtex en ordre horari).

Els pol√≠gons han de ser creats i guardats de manera immediata o utilitzats en alguna operaci√≥ fent √∫s de la notaci√≥:

    nomPoligon := [x1 y1  x2 y2  x3 y3]

o alternativament

    nomPoligon := operaci√≥ amb pol√≠gons

Les comandes disponibles amb pol√≠gons regulars s√≥n:

    - color p, {}: Estableix el color del pol√≠gon p als valors RGB donats (seguint les sigles en angl√®s Red, Green i Blue). El rang dels colors √©s [0,1].
    - print p o print "missatge": En cas de que p sigui un pol√≠gon mostrar√© els seus v√®rtex per pantalla. En cas de donar un missatge mostrar√© el missatge.
    - area p: Mostrar√© l'√†rea del pol√≠gon p.
    - perimeter p: Mostrar√© el per√≠metre del pol√≠gon p.
    - vertices p: Mostrar√© el nombre de v√®rtex del pol√≠gon p.
    - centroid p: Mostrar√© el centroide del pol√≠gon p.
    - inside p1, p2: Et dir√© si p1 est√† dintre de p2.
    - equal p1, p2: Et dir√© si p1 i p2 s√≥n iguals.

Pots definir qualsevol pol√≠gon utilitzant el nom amb el que l'has definit anteriorment, utilitzant un dels dos m√®todes de creaci√≥ que t'he ensenyat o com a una operaci√≥ entre pol√≠gons.
Les operacions que pots fer s√≥n:

    - p1 + p2: Retorna la uni√≥ convexa entre els pol√≠gons p1 i p2.
    - p1 * p2: Retorna la intersecci√≥ entre els pol√≠gons p1 i p2.
    - #p: Retorna la capsa contenidora del pol√≠gon p.

Tamb√© pots utilitzar par√®ntesi per definir prioritat entre les opareacions.

Finalment per mostrar una imatge amb els pol√≠gons tinc la comanda draw:

    - draw "arxiu.png", p1, p2, p3

Amb la que em pots passar tants pol√≠gons com vulguis i te-ls ensenyare representats en 2D. üìàüìà

        '''.format(rgb)
        # text='''Hola.'''
        context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        context.bot.send_message(chat_id=update.effective_chat.id, text='Espero haver-te sigut d\'ajut, ja em diras el que puc fer per tu. ‚ò∫Ô∏è')

    # Metode que est√† associat a la comanda /author.
    # D√≥na informaci√≥ sobre l'author
    def author(self, update, context):
        text = '''
El meu autor √©s l' *Andreu Pla*.
Pots posar-te en contacte amb ell via mail a:
‚úâÔ∏è`andreu.pla.ortiz.de.zarate@estudiantat.upc.edu`'''
        context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='Markdown', text=text)

    def reset(self, update, context):
        context.user_data['antlr'] = Interpret()
        context.bot.send_message(chat_id=update.effective_chat.id, text='S\'han esborrat les dades. Ja pots tornar a demanar el que necessitis.')
        text = '''
Si vols m√©s informaci√≥ sobre les comandes que pots utilitzar escriu la comanda */help*.'''
        context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='Markdown', text=text)

    # Extreu els resultats de l'execuci√≥ cridant a l'int√®rpret
    def interpret(self, update, context):
        input = update.message.text

        info = context.user_data['antlr'].executarInstruccio(input)
        # Retorna sempre un string, tant si √©s un resultat o el nom d'un fitxer .png a enviar

        if (info is not None):
            out = ''
            for x in info:
                if (x is not None):
                    # print(x)
                    if (len(x) > 3 and x[len(x)-4] == '.' and x[len(x)-3] == 'p' and x[len(x)-2] == 'n' and x[len(x)-1] == 'g'):
                        file = self.imageFolder + x
                        context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(file, 'rb'))
                    else:
                        out += x + '\n'

            if (out != ''):
                context.bot.send_message(chat_id=update.effective_chat.id, text=out)

        # Si info es None, es que hi ha hagut algun error al tractar l'instrucci√≥
        else:
            text = 'No entenc el que em vols dir. Intenta-ho un altre cop'

    # Metode que est√† associat a la comanda /author.
    # Serviria per terminar el bot, per√≤ de moment nom√©s es pot terminar parant l'execuci√≥ des de terminal.
    def exit(self, update, context):
        text = '''
Espero que t\'hagi sigut d\'ajut, si et fan falta m√©s pol√≠gons sempre pots tornar-me a despertar amb la comanda */start*.
        '''
        context.bot.send_message(chat_id=update.effective_chat.id, parse_mode='Markdown', text=text)
        context.bot.send_message(chat_id=update.effective_chat.id, text='A reveure!')
        context.bot.send_message(chat_id=update.effective_chat.id, text='üëã')
        sys.exit(0)     # aix√≤ haur√≠a de terminar el programa per√≤ per alguna ra√≥ no funciona.

bot = Bot()
